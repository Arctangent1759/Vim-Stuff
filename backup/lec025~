Binary Search Trees
===================
	Binary Search Trees can be used to implement an Ordered Dictionary
	\*Ordered Dictionary\*: Keys have a total order, like in a heap.

	insert, find, and remove entries.

	Quickly find entry with min or max key, or key nearest another key.

	Tree:
									18
					12				|				35
			4		|		15		|		25		|		30
		1			|	13	|	17	|				|		28
		3			|	14	|		|				|		29
		
	\*Binary Search Tree Invariant\*:
		For every node x, every tree in left subtree of X <= X's key.
		For every node x, every tree in the right subtree of X >= X's key.

	An inorder traversal of a binary search tree always visits the nodes in sorted order.

	Closest to k
	------------
		How do we find the smallest key > k?
		or a largest key < k?

		Walk down the tree. One of them is guaranteed to be the largest > k, and another will be the smallest < k.
	
	min() and max()
	---------------
		min()
			If tree is empty, return null.
				Otherwise, start at root, and take all the left trees until null.
		max()
			If tree is empty, return null.
				Otherwise, start at root, and take all the right trees until null.
	
	insert(Object k, Object v)
	--------------------------
		Follow same path through tree as find()
		When you reach a null reference, replace the reference with a node pointing to new Entry(k,v).

		Duplicate keys allowed. Puts new entry in left subtree of older one. (establish convention in implementation)

	Entry remove(Object k);
	-----------------------
		Find node n with key k. Return null if k not in tree.

		If n has no children, detach it from its parent.

		If n has 1 child, move n's child to take n's place.

		If n has 2 children:
			Let x be the n's right subtree with the smallest key.
			Remove x; x has no left child (maximum of 1 child), so this is easy.
			Replace n's entry with x's entry.

	Running Times
	-------------
		Depends on how balanced a tree is:

		Perfectly balanced:
									o
							o				o
						o		o		o		o
			No node has depth > log_2 n
			O(log n) operations

		HOLY CRAP KILL IT WITH FIRE:
			o
				o
					o
						o
			All operations take O(n), same as linked list


			
