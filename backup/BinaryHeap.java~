package BinaryHeap;
/*
 *
 * yes
 * no
 * yes
 * no
 * no
 * yes
 *
 * */

public class BinaryHeap{
	protected int[] arr;
	protected int maxIndex;
	public BinaryHeap(int size){
		arr = new int[size+1];
		maxIndex=0;
	}
	//BottomUp Heap construction
	public BinaryHeap(int[] nums){
		arr = new int[nums.length+1];
		maxIndex=nums.length;
		int temp;
		int tempindex;
		int j;
		for (int i = nums.length; i > 0; i--){
			arr[i]=nums[i-1];
			j=i;
			while ((leftChild(j) <= maxIndex && arr[leftChild(j)] < arr[j]) || (rightChild(j) <= maxIndex && arr[rightChild(j)] < arr[j])){
				if (leftChild(j) <= maxIndex && rightChild(j) <= maxIndex){
					if (arr[leftChild(j)]<arr[j] || arr[rightChild(j)]<arr[j]){
						tempindex=arr[leftChild(j)]<arr[rightChild(j)]?leftChild(j):rightChild(j);
						temp=arr[j];
						arr[j]=arr[arr[leftChild(j)]<arr[rightChild(j)]?leftChild(j):rightChild(j)];
						arr[arr[leftChild(j)]<arr[rightChild(j)]?leftChild(j):rightChild(j)]=temp;
						j=tempindex;
					}
				}else if(leftChild(j) <= maxIndex){
					if (arr[leftChild(j)]<arr[j]){
						temp=arr[j];
						arr[j]=arr[leftChild(j)];
						arr[leftChild(j)]=temp;
						j=leftChild(j);
					}
				}else if(rightChild(j) <= maxIndex){
					if (arr[rightChild(j)]<arr[j]){
						temp=arr[j];
						arr[j]=arr[rightChild(j)];
						arr[rightChild(j)]=temp;
						j=rightChild(j);
					}
				}
			}
		}
	}

	public void insert(int item){
		maxIndex++;
		expandArray();
		arr[maxIndex]=item;
		int temp;
		for (int i = maxIndex; i!=1 && arr[i]<arr[parent(i)]; i=parent(i)){
			temp = arr[parent(i)];
			arr[parent(i)]=arr[i];
			arr[i]=temp;
		}
	}

	public int removeMin(){
		if (maxIndex==0){
			return 0;
		}
		int out = arr[1];
		arr[1]=arr[maxIndex];
		maxIndex--;

		int targetIndex;
		int temp;
		int i = 1;

		while (i < maxIndex){
			if (rightChild(i)<=maxIndex && leftChild(i)<=maxIndex && (arr[i]>arr[rightChild(i)] || arr[i]>arr[leftChild(i)])){
				targetIndex=((arr[rightChild(i)]<arr[leftChild(i)]) ? rightChild(i):leftChild(i));
			}else if (rightChild(i)<=maxIndex && arr[i]>arr[rightChild(i)]){
				targetIndex=rightChild(i);
			}else if (leftChild(i)<=maxIndex && arr[i]>arr[leftChild(i)]){
				targetIndex=leftChild(i);
			}else{
				return out;
			}
			temp=arr[i];
			arr[i]=arr[targetIndex];
			arr[targetIndex]=temp;
			i=targetIndex;
		}

		return out;
	}

	String stdtab="\t\t";
	public String toString(){
		String out="";
		int i = 1;
		int cap=1;
		while (i <= maxIndex){
			while (i < cap && i <= maxIndex){
				out+=arr[i]+stdtab;
				i++;
			}
			out+="\n";
			cap*=2;
		}
		return out;
	}

	public static int[] heapSort(int[] arr){
		BinaryHeap h = new BinaryHeap(arr);
		int[] out = new int[arr.length];
		for (int i = 0; i < arr.length; i++){
			out[i]=h.removeMin();
		}
		return out;
	}


	//helper methods
	private int leftChild(int index){
		return index*2;
	}
	private int rightChild(int index){
		return index*2+1;
	}
	private int parent(int index){
		return index/2;
	}

	private void expandArray(){
		if  (maxIndex>=arr.length){
			int[] newArr = new int[arr.length*2];
			for (int i = 0; i < arr.length; i++){
				newArr[i]=arr[i];
			}
			arr=newArr;
		}
	}

	//test methods
	public static void main(String[] args){
		BinaryHeap h = new BinaryHeap(5);
		h.insert(1);
		h.insert(2);
		h.insert(3);
		h.insert(4);
		h.insert(5);
		h.insert(6);
		h.insert(7);
		h.insert(8);
		h.insert(9);
		h.insert(10);
		h.insert(11);
		h.insert(12);
		h.insert(13);
		h.insert(14);
		h.insert(15);
		h.insert(16);
		h.insert(17);
		print(h);
	}
	private static void print(Object o){
		System.out.println(o);
	}
}
