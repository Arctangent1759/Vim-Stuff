public class Test{
	public static void main(String args[]){
		Set t1 = new Set();
		t1.insert(new Integer(2));
		t1.insert(new Integer(2));
		t1.insert(new Integer(5));
		t1.insert(new Integer(5));
		t1.insert(new Integer(5));
		t1.insert(new Integer(5));
		t1.insert(new Integer(7));
		t1.insert(new Integer(7));
		t1.insert(new Integer(7));
		t1.insert(new Integer(7));
		Set t2 = new Set();
		t2.insert(new Integer(1));
		t2.insert(new Integer(3));
		t2.insert(new Integer(4));
		t2.insert(new Integer(9));
		System.out.println("Should be { 2  5  7 }: "+t1);
		System.out.println("Should be {  1  3  4  9 }: "+t2);
		t1.union(t2);
		System.out.println("Should be {  1  2  3  4  5  7  9 }: "+t1);

		Set s1=new Set();
		s1.insert(new Integer(1));
		s1.insert(new Integer(7));
		s1.insert(new Integer(5));
		s1.insert(new Integer(9));

		Set s2=new Set();
		s2.insert(new Integer(1));
		s2.insert(new Integer(7));
		s2.insert(new Integer(1));
		s2.insert(new Integer(8));

		System.out.println("Should be { 1  5  7  9 }: "+s1);
		System.out.println("Should be { 1  7  8 }: "+s2);
		s1.intersect(s1);
		System.out.println("Should be { 1  5  7  9 }: "+s1);
		s1.intersect(s2);
		System.out.println("Should be { 1  7 }: "+s1);

		Set s3 = new Set();
		System.out.println("Should be {  }: "+s3);
		s3.intersect(s3);
		System.out.println("Should be {  }: "+s3);
		s3.intersect(s2);
		System.out.println("Should be {  }: "+s3);
		s1.intersect(s3);
		System.out.println("Should be {  }: "+s1);
		s3.union(s2);
		System.out.println("Should be { 1  7  8 }: "+s2);

		Set r1 = new Set();
		Set r2 = new Set();
		r1.insert(-1000);
		r1.insert(-10);
		r1.insert(3);
		r1.insert(13);
		r1.insert(1759);

		r2.insert(1);
		r2.insert(2);
		r2.insert(3);
		r2.insert(4);
		r2.insert(5);

		System.out.println("Should be { -1000  -10  3  13  1759 }: " + r1);
		System.out.println("Should be { 1  2  3  4  5 }: " + r2);
		r1.union(r2);
		System.out.println("Should be { -1000  -10  1  2  3  4  5  13  1759 }: " + r1);
		r1.intersect(r2);
		System.out.println("Should be { 1  2  3  4  5 }: " + r2);
	}
}
