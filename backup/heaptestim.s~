.text

# _start is the entry point into any program.
.global _start
.ent    _start 
_start:

#
#  The header ends here, and code goes below
#

# First Fit Malloc Testing

set_sizes:
  ori $s0, $0, 1024
  ori $s1, $0, 512
  ori $s2, $0, 256
  ori $s3, $0, 2048
  ori $s4, $0, 11775
  ori $s5, $0, 16384 #entire size of heap
  ori $s6, $0, 16384 #for comparison of the address

body:
  add $a0, $s2, $0  #block 1
  jal allocate
  bne $s6, $v0, alloc_failed

  addu $s6, $s6, $s2

  add $a0, $s0, $0 #block 2
  jal allocate
  bne $s6, $v0, alloc_failed

  addu $s6, $s6, $s0

  add $a0, $s1, $0 #block 3
  jal allocate
  bne $s6, $v0, alloc_failed

  addu $s6, $s6, $s1

  addiu $a0, $0, 16640
  jal free #frees block 2

  add $a0, $s1, $0 #block 4
  jal allocate
  bne $s6, $v0, alloc_failed

  addu $s6, $s6, $s1

  add $a0, $s3, $0 #block 5
  jal allocate
  bne $s6, $v0, alloc_failed

  addu $s6, $s6, $s3

  add $a0, $s4, $0 #block 6
  jal allocate
  bne $s6, $v0, alloc_failed

  addiu $s6, $0, 16640

  add $a0, $s1, $0 #block 7
  jal allocate
  bne $s6, $v0, alloc_failed

  addu $s6, $s6, $s1

  add $a0, $s1, $0 #block 8
  jal allocate
  bne $s6, $v0, alloc_failed

  addiu $a0, $0, 16640
  jal free # frees block 7

  addiu $a0, $0, 17152
  jal free # frees block 8

  addiu $a0, $0, 20736
  jal free # frees block 6

  add $a0, $0, $s5
  jal free # frees block 1

  addiu $s6, $0, 16384

  addiu $a0, $0, 1025 # block 9
  jal allocate
  bne $s6, $v0, alloc_failed

  ori $v0, $0, 63
  syscall
  j exit



allocate:
  ori $v0, $0, 60 #set syscall code to fn_malloc
	syscall
  jr $ra


free:
  ori $v0, $0, 62 #set syscall code to free
	syscall
  jr $ra   

alloc_failed:
  or $a0, $0, $0 #zero out
  ori $a0, %lo(str)
  ori $v0, $0, 4
  syscall # print the string

# exit the simulation (v0 = 10, syscall)
exit:
	ori   $v0, $zero, 10
	syscall

.end _start

.data
str: .asciiz "ALLOCATION FAILED!\n"
