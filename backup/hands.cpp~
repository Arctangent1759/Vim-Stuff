using namespace std;
#include "hands.h"

/////////////////////////////
//DealerHand Implementation//
/////////////////////////////

/*
 * Construct an empty hand for the dealer.
 */
DealerHand::DealerHand(){
	myCardCount = 0;
	myAceAs11Count=0;
	myTotal=0;
}

/*
 * Reinitialize the hand to contain no cards.
 */
void DealerHand::Reset(){
	myCardCount = 0;
	myAceAs11Count=0;
	myTotal=0;
}

/*
 * Add the given card to the hand.
 */
void DealerHand::AddCard(Card c){
	//If score is 0, update the UpCard.
	if (myTotal == 0){
		myUpCard=c;
	}
	//Update the number of aces if ace.
	if (c.IsAce()){
		myAceAs11Count+=1;
	}
	//Update the total.
	myTotal+=c.Value();
	//Collapse Aces while total > 21.
	while (myTotal > 21 && myAceAs11Count > 0){
		myTotal-=10;
		myAceAs11Count--;
	}
	//Update the number of cards.
	myCardCount+=1;
}

/*
 * Return true if, according to the dealer's strategy, another
 * card should be drawn. (The dealer's strategy is to draw a
 * card when his/her total is less than or equal to 16.)
 */
bool DealerHand::CanDraw(){
	return myTotal <= 16;
}

/*
 * Return the dealer's "up card" (the first card dealt to the
 * dealer at the start of each game).
 */
Card DealerHand::UpCard(){
	return myUpCard;
}

/*
 * Return the dealer's total hand value.
 */
int DealerHand::Total(){
	return myTotal;
}

/*
 * Print avaliable information about the hand.
 */
void DealerHand::Print(){
	cout << "\t" << "Dealer hand: " << myCardCount << " cards, " << myAceAs11Count << " aces counting 11, " << myTotal << " total. " << "UpCard = " << myUpCard.Name() << endl;
}

///////////////////////////////
//CustomerHand Implementation//
///////////////////////////////

/*
 * Construct an empty hand for the customer.
 */
CustomerHand::CustomerHand(){
	myCardCount = 0;
	myAceAs11Count=0;
	myTotal=0;
}

/*
 * Reinitialize the hand to contain no cards.
 */
void CustomerHand::Reset(){
	myCardCount = 0;
	myAceAs11Count=0;
	myTotal=0;
}

/*
 * Add the given card to the hand.
 */
void CustomerHand::AddCard(Card c){
	//Update the number of aces if c is an ace.
	if (c.IsAce()){
		myAceAs11Count+=1;
	}
	//Update the total.
	myTotal+=c.Value();
	//Collapse Aces while total > 21.
	while (myTotal > 21 && myAceAs11Count > 0){
		myTotal-=10;
		myAceAs11Count--;
	}
	//Update the number of cards.
	myCardCount+=1;
}

/*
 * Return true if, according to the player's strategy, another
 * card should be drawn.
 */
const int _STRATEGY_ = 1; //0 for simple strategy, 1 for complex
bool CustomerHand::CanDraw(Card dealerUpCard){
	if (_STRATEGY_ == 0){
		return Total() <= 16;
	}else{
		return (((myTotal<17 && 7<=dealerUpCard.Value() && dealerUpCard.Value()<=10) || dealerUpCard.IsAce()) || 
				(myTotal<12 && (2<=dealerUpCard.Value() && dealerUpCard.Value()<=6)));
	}
}

/*
 * Return the total hand value.
 */
int CustomerHand::Total(){
	return myTotal;
}

/*
 * Print avaliable information about the hand.
 */
void CustomerHand::Print(){
	cout << "Customer hand: " << myCardCount << " cards, " << myAceAs11Count << " aces counting 11, " << myTotal << " total."<< endl;
}
