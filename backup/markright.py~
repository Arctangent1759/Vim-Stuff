#!/usr/bin/python
import argparse

####################
#    Constants     #
####################
DEBUG=True;

####################
#     Globals      #
####################

####################
#  Main Functions  #
####################
def main():
	"""Main function reads filenames from arglist and interprets each one."""
	parser=argparse.ArgumentParser(description='Render MarkRight files.');
	parser.add_argument('files',metavar='f',type=str, nargs='+', help='MarkRight file to be parsed.');
	args=parser.parse_args();
	for filename in args.files:
		markright(filename);

def markright(filename):
	"""The markright compiler; Renders html according to the markright code in filename."""
	buf=MRBuffer(filename)
	dprint("Creating Buffer:")
	dprint(buf);

####################
# Helper Functions #
####################
def dprint(s):
	"""Debug printing"""
	if DEBUG:
		print s

			

####################
#     Classes      #
####################
class MRBuffer(object):
	"""A markright buffer"""
	def __init__(self,filename):
		self._lines=[line[:-1] for line in open(filename).readlines()];
		self._index=0;
	
	@property
	def curr(self):
		if self._index<len(self):
			return self._lines[self._index];
		return None;

	@property
	def nxt(self):
		if self._index+1<len(self):
			return self._lines[self._index+1];
		return None;
	
	@property
	def has_more(self):
		return None != self.curr

	def pop(self):
		out=(self.curr,self.nxt);
		self._index+=1;
		return out;

	def __str__(self):
		return "{0}\n--> {1}".format(self.curr,self.nxt)

	def __len__(self):
		return len(self._lines);

	def __getitem__(self,index):
		return self._lines[index]


####################
#     Run Main     #
####################

if __name__=="__main__":
	main();

