Z(w)=Y(wT)H(w)
H(w)=CTFT of h(t)
z(t)=\sum_(h=-inf)^(inf) y(n) h(t-nT)

h(n) should be the sinc function, or thhe ideal low pass filter:

                                        H(w)
                                        |
                                        |
                                        |
                              ----------|---------- 1/fs
                              |         |         |
                              |         |         |
                              |         |         |
                              |         |         |
                              |         |         |
                              |         |         |
------------------------------|---------|---------|-----------------------------w
                            -pi fs              pi fs

h(t)=1/fs sin(pi fs t)/(pi t)

fs = 1/T

h(t)=sin(pi t/T)

Problem: Need to interpolate forever.
  Interpolation (sinc) is not  causal.
  You need future samples to have real time interpolation.
Solution: Introduce a delay into the system.
  Look somewhat into the future. Since the sinc function decays to 0, can set finite delay window.
  Problem: Ideal low pass filter allows for too many high frequencies; want fast decay to limit window.
  Solution: Don't use ideal lpf; use curvy version instead.

Downsampling
============
  When you downsample, the Fourier Transform gets wider.
  Apply aliasing filter to prevent aliasing.
  To reconstruct downsampled  data, interpolate to find x(t), the CT signal, and resample to get the original signal.

  y(n)=x(nT)=\sum_(m=-inf)^(inf)w(m)h_(2T) (nT-2mT)
  h_(2T)(t)=sin(pi t/(2T))
  h_(2T)((n-2m)T)=sin(pi (n-2m)T/(2T))=sin(pi (n-2m)/(2))
