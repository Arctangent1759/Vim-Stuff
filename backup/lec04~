What is Search For?
===================

Planning and ...

Identification: Assignments to variables
----------------------------------------

+ The goal itself is important, not the path.

+ All paths at the same depth (for some formulations)

+ CSPs are specialized for identification problems

Constraint Satisfaction Problems
================================

Recall Standard Search Problems
-------------------------------

+ State is a black box, an arbitrary data structure

+ Goal test can be function over states

+ Successor function can also be anything

Constraint Satisfaction Problems:
---------------------------------

+ A special subset of search problems

+ State is defined by variables X_i with values from a domain D

+ Goal test is a set of constraints specifying allowable combbinations of valeus fo subsets of variables

Simple example of a formal representation language

Allows useful general purpose algorithms with more power than standard search algorithms

Examples
--------

###Map Coloring
+ Variables: WA, NT, Q, NSW, V, SA, T
+ Domains: D={red,green,blue}
+ Constraints: Adjacent regions must have different colors
	+ Implicit: $WA \neq NT$

Solutions are sets of colors: {WA:red, NT:green, Q:blue, NSW:red, V:blue, SA:green, T:blue}

###Example: N-Queens
+ Variables: $Q_{k}$
+ Domains: $\{1,2,3,\cdots,N\}$
+ Constraints
	+ Implicit: $\forall i,j \mbox{ non-threatening}(Q_i,Q_j)$

Varieties of CSPs
-----------------
+Discrete variables
	+ Finite Domains
		+ Size D means $O(d^n)$ complete assignments
		+ Like boolean CSPS
	+ Infinite Domains
		+ Job Scheduling, 
		Move to a complete solution
		+ Linear constraints solvable,nonlinear 
+Continuous variables
	+ Start/End times
	+ Linear Constraints solvable in polynomial time by LP methods

Varieties of Constraints
------------------------
+ Unary constraints involve a signle variable, like South Austrialia in NOT green.
+ Binary constraints involve pairs of variables, eg South Austrialia is not teh same color of West Austrialia
+ Higher order constraints

Solving CSPs
------------
+ States are partial solutions
###What would BFS do?
+ BFS tries every single state that doesn't work, since all solutions are at bottom level.
+ So BFS for CSPs really suck.
###What would DFS do?
+ Change variables until tree bottom.
+ Tries a lot of bad approaches that are obviously wrong.
###Backtracking
+ Try only solutions that don't violate constraints
+ Go back in recursion/fringe if there's a violation of the constraints in all children
###Filtering
+ Keep track of domains for unassigned variables but cross off bad options
+ **Forward checking**: Cross off violating options
+ Consistency of a single arc
	+ An arc X$\rightarrow$Y is consistent iff for every x in the tail there is some y in the head which could be assigned without violating a constraint.
	+ Forward checking enforces consistency of arcs pointing to each new assignment
	+ If an arc loses a value, all neighbors need to be rechecked
	+ Advantages: you prune a lot
	+ Disadvantages: Expensive
	+ Algorithm known as AC3, runs on $O(n^2d^3)$
	+ After enforcing arc consistency, we can have
		+ One solution left
		+ Multiple solutions left
		+ No solutions left (But not know)
	+Arc consistency still requires some backtracking.
+ Variable Ordering
	+ Choose the variable with the fewest legal left values in its domain
