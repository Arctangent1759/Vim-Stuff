/*
 *
 */
#include <iostream>
#include <string>
#include <vector>
using namespace std;

//Represents a game board
class Board{
	public:
		Board();
		void SetCell (int player, int row, int col, char c);
		void Print (int player);
	private:
		vector< vector<string> > myList;//Contains the board data
};

//Constructs a new board
Board::Board(){
	myList=vector< vector<string> >(18);//Initialize outer vector
	for (int i = 0; i < myList.size(); i++){
		myList[i]=vector<string>(18);//Initialize each inner vector
		for (int j = 0; j < myList[i].size(); j++){
			myList[i][j]=".";//Set value of each cell
		}
	}
}

//Sets the cell at row, col to c from player's perspective
void Board::SetCell(int player, int row, int col, char c){
	if (player==0){
		myList[row][col]=c;//set cell as normal
	}else{
		myList[myList.size()-1-row][myList.size()-1-col]=c;//flip board, then set cell
	}
}

//Prints the board from player's perspective
void Board::Print(int player){
	if (player==0){
		for (int i = 0; i < myList.size(); i++){
			for (int j = 0; j < myList[i].size(); j++){
				cout << myList[i][j];//print each line of board
			}
			cout << endl;
		}
	}else{
		for (int i = myList.size()-1; i >= 0 ; i--){
			for (int j = myList[i].size()-1; j >= 0 ; j--){
				cout << myList[i][j];//flip board, then print each line of board.
			}
			cout << endl;
		}
	}
}

//Tests
int main(){
	Board b;
	b.Print(0);
	cout << endl;
	b.SetCell(0,0,0,'a');
	b.SetCell(0,0,1,'b');
	b.SetCell(0,3,1,'c');
	b.SetCell(0,3,7,'d');
	b.SetCell(0,3,9,'e');
	b.SetCell(0,7,9,'f');
	b.SetCell(0,17,9,'g');
	b.SetCell(0,17,17,'h');
	b.SetCell(0,15,17,'i');
	b.Print(0);
	cout << endl;
	b.Print(1);
	cout << endl;
	b.SetCell(1,15,0,'j');
	b.SetCell(1,11,0,'k');
	b.SetCell(1,11,9,'l');
	b.Print(1);
	cout << endl;
	b.Print(0);
}
