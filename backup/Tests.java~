package list;
public class Tests{
	public static void main(String args[]){
		DList d = new DList();
		d.insertBack("Potato");
		d.insertBack(1);
		d.insertBack(2);
		d.insertBack(3);
		d.insertFront(5);
		d.insertFront("A toast to not being on fire!");
		print("Should be [\"A toast to not being on fire!\", 5, \"Potato\", 1, 2, 3]: "+d);
		print("Should be 6: "+d.length());
		print("Should be \"A toast to not being on fire!\": "+d.front().item);
		print("Should be 3: "+d.back().item);
		d.remove(d.back());
		print("Should be 2: "+d.back().item);
		d.remove(d.front());
		print("Should be 5: "+d.front().item);
		d.remove(d.next(d.front()));
		print("Should be [5, 1, 2]: "+d);
		print("Should be 3: "+d.length());
		d.remove(d.prev(d.front()));
		print("Should be [5, 1, 2]: "+d);
		print("Should be 3: "+d.length());
		d.remove(d.prev(d.back()));
		print("Should be [5, 2]: "+d);
		print("Should be 2: "+d.length());
		d.insertBefore(7,d.back());
		print("Should be [5, 7 ,2]: "+d);
		print("Should be 3: "+d.length());
		d.insertAfter(9,d.back());
		print("Should be [5, 7, 2, 9]: "+d);
		d.insertAfter(1,d.front());
		print("Should be [5, 1, 7, 2, 9]: "+d);
		d.insertBefore(6.5,d.front());
		print("Should be [6.5, 5, 1, 7, 2, 9]: "+d);
		print("Should be 6: "+d.length());
		asdf();

		System.out.println();
		System.out.println("==============");
		System.out.println("Robert's Tests");
		System.out.println("==============");
		blerg();
	}
	//Redeeming features of python
	private static void print(String s){
		System.out.println(s);
	}
	public static void asdf(){
		LockDList d = new LockDList();
		d.insertBack("Potato");
		d.insertBack(1);
		d.insertBack(2);
		d.insertBack(3);
		d.insertFront(5);
		d.insertFront("A toast to not being on fire!");
		print("Should be [\"A toast to not being on fire!\", 5, \"Potato\", 1, 2, 3]: "+d);
		print("Should be 6: "+d.length());
		print("Should be \"A toast to not being on fire!\": "+d.front().item);
		print("Should be 3: "+d.back().item);
		d.remove(d.back());
		print("Should be 2: "+d.back().item);
		d.remove(d.front());
		print("Should be 5: "+d.front().item);
		d.remove(d.next(d.front()));
		print("Should be [5, 1, 2]: "+d);
		print("Should be 3: "+d.length());
		d.remove(d.prev(d.front()));
		print("Should be [5, 1, 2]: "+d);
		print("Should be 3: "+d.length());
		d.remove(d.prev(d.back()));
		print("Should be [5, 2]: "+d);
		print("Should be 2: "+d.length());
		d.insertBefore(7,d.back());
		print("Should be [5, 7 ,2]: "+d);
		print("Should be 3: "+d.length());
		d.insertAfter(9,d.back());
		print("Should be [5, 7, 2, 9]: "+d);
		d.insertAfter(1,d.front());
		print("Should be [5, 1, 7, 2, 9]: "+d);
		d.insertBefore(6.5,d.front());
		print("Should be [6.5, 5, 1, 7, 2, 9]: "+d);
		print("Should be 6: "+d.length());
		d.remove(d.front());
		d.remove(d.front());
		d.remove(d.front());
		d.remove(d.front());
		d.remove(d.front());
		print("Should be 1: "+d.length());
		print("Should be [9]: "+d);
		d.lockNode(d.front());
		d.remove(d.front());
		print("Should be 1: "+d.length());
		print("Should be [9]: "+d);
		d.insertFront(5);
		d.lockNode(d.front());
		d.insertFront(7);
		d.lockNode(d.front());
		d.insertFront(1);
		d.lockNode(d.front());
		print("Should be [1,7,5,9]: "+d);
		d.remove(d.front());
		d.remove(d.next(d.front()));
		d.remove(d.next(d.next(d.front())));
		d.remove(d.next(d.next(d.next(d.front()))));
		print("Should be [1,7,5,9]: "+d);
		print("Should be 4: "+d.length());
		d.insertAfter(1717,d.prev(d.back()));
		d.remove(d.front());
		d.remove(d.next(d.front()));
		d.remove(d.next(d.next(d.front())));
		d.remove(d.next(d.next(d.next(d.front()))));
		d.remove(d.next(d.next(d.next(d.next(d.front())))));
		print("Should be [1,7,5,9]: "+d);


	}
	 public static void blerg() {

		DList l = new DList();
		DListNode a = l.front();
		DListNode b = l.back();
		System.out.println("asdfa"+a+b);

		l.insertFront(9);
		System.out.println("\nInserting 9 at front.\nList with 9 is " + l);
		if (l.head.next.item != 9) {
		System.out.println("head.next.item is wrong.");
		}
		if (l.head.next.prev != l.head) {
		System.out.println("head.next.prev is wrong.");
		}
		if (l.head.prev.item != 9) {
		System.out.println("head.prev.item is wrong.");
		}
		if (l.head.prev.next != l.head) {
		System.out.println("head.prev.next is wrong.");
		}
		if (l.size != 1) {
		System.out.println("size is wrong.");
		}
		l.insertFront(8);
		System.out.println("\nInserting 8 at front.\nList with 8 and 9 is " + l);
		if (l.head.next.item != 8) {
		System.out.println("head.next.item is wrong.");
		}
		if (l.head.next.prev != l.head) {
		System.out.println("head.next.prev is wrong.");
		}
		if (l.head.prev.item != 9) {
		System.out.println("head.prev.item is wrong.");
		}
		if (l.head.prev.next != l.head) {
		System.out.println("head.prev.next is wrong.");
		}
		if (l.head.next.next != l.head.prev) {
		System.out.println("l.head.next.next != l.head.prev.");
		}
		if (l.head.prev.prev != l.head.next) {
		System.out.println("l.head.prev.prev != l.head.next.");
		}
		if (l.size != 2) {
		System.out.println("size is wrong.");
		}

		l.insertBack(7);
		System.out.println(l);
		System.out.println(l.size);
		l.remove(l.head.next);
		System.out.println(l);
		System.out.println(l.size);
		l.insertAfter(100,l.head.next);
		System.out.println(l);
		System.out.println(l.size);
		l.insertBefore(200,l.head.next);
		System.out.println(l);
		System.out.println(l.size);
	}
	public static void f(){
		LockDList l = new LockDList();
		l.insertFront(8);
		l.insertBack(7);
		System.out.println(l);
		System.out.println(l.size);
		l.remove(l.head.next);
		System.out.println(l);
		System.out.println(l.size);
		l.insertAfter(100,l.head.next);
		System.out.println(l);
		System.out.println(l.size);
		l.insertBefore(200,l.head.next);
		System.out.println(l);
		System.out.println(l.size);
		l.lockNode(l.head.next);
		l.remove(l.head.next);
		System.out.println(l);
		l.insertFront(8);
		l.remove(l.head.next.next);
		System.out.println(l);
		l.remove(l.head.next);
		System.out.println(l);
	}
}
