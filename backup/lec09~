Translation and Interpretation
==============================
  Translated/compiled code more efficient than interpreted code.

  C Translation
  -------------

	Compiler
	Assembler
	Linker
	Loader

	Compiler
	--------
	  Input: Higher level language code (.java or .c)
	  Note the output may contain pseudo instructions

	  So... Compilers are REALLY FUCKING COMPLICATED (take cs164).
	  Parsing, associativity, precedence, etc.

	  Compiler Optimization
		Level of optimization specified by O followed by number, like -O1

		Trade-off is compilation speed vs output file size/performance

	Assembler
	---------
	  Does Assembler directives
	  Gives instructions to assembler, but do not produce machine instructions
		.text: Everything that follows is code
		.data: everything that follows are in data segment
		.global sym: declares sym global can be refed by other files

	  Replaces Pseudoinstructions with real instructions

	  What about branches?
		Branches require relative address
		After Pseudoinstruction replcement, we know where every instruction and label is
		So we know the rel. address of every label

		Problem:
		  Labels can be forward in program
		Solution:
		  Make two passes

		Jumps require absolute addresses
		  If we merge two files, addresses change, because we stack our files.
		  So we need to make tables:

		  Symbol Table
		  ------------
			List of items that may be used by other files.
			  Labels: Function calling
			  Data: Anything in the .data section; variables accessed accross files
		  Relocation Table
		  ----------------
			  List of items this file will need the address of later
			  Labels and data

		  Symbol is 'what I have'
		  Relocation is 'what I need'

		  ELF is a common table format.

	  Linker
	  ------
		Take Object code files,  information tables, and returns Executable Code, like a.out.

		Combines each .o file's text and data segments, and links them together.
		
		Does table lookup, etc.

		Types of addressing and changes:
		  PC Relative addressing doesn't change
		  Absolute  address 

		Determine references with symbol tables. If not found, look for libraries

		Statically Linked Libraries
		---------------------------
		  Library file is dumped into executable
		  If library is updated, executable not updated
		  But program is self-contained.

		Dynamically Linked Libraries
		----------------------------
		  Storing program less space
		  Sending program faster
		  Executing two programs use less memory
		  Updating library -> update all programs

		  Program not self-contained
