++++++++++++++++++++++++++++++++++++++++++++++++++++++
*********           Commandments:             ********
++++++++++++++++++++++++++++++++++++++++++++++++++++++
	Anyone found in violation of the folowing statutes will be summarily executed.

	Formatting and Readability
	--------------------------
		1. Single tabs, not spaces
		2. Don't use i, j, k
		3. Use Camel case
		4. When in doubt, comment.
		5. Multiline comment docstrings
		6. Specify orders of growth for all your functions.
	
	Coding Style
	------------
		1. Always use override decorator
		2. When in doubt, use protected
		3. Use constants when available, not values.
		4. Abstraction!

	Github and Collaboration
	------------------------
		1. Do not push untested or disfunctional code to github.
		2. Push and test often if editing shared file like Constants
	
	Debugging
	---------
		1. Use Constants.print, not System.out.println



++++++++++++++++++++++++++++++++++++++++++++++++++++++
*********          Interface Design           ********
++++++++++++++++++++++++++++++++++++++++++++++++++++++

Constants
=========
	/**
	 *
	 *	Global class contining constants that will be
	 *	used throughout the project.
	 *
	**/
	public final class Constants{


		//Board Constants
		public static final BOARDHEIGHT=8; //The height of a board
		public static final BOARDWIDTH=8; //The width of a board


		//Player Constants
		public static final NULL_PLAYER=0; //No player here
		public static final BLACK=1; //Black player
		public static final WHITE=2; //White player


		//Game Constants
		public static final MAX_CHIPS=10; //The maximum number of chips in the game


		//Debugging and misc.
		public static final DEBUG=true; //Used to disable unwanted debug output

		/**
		 *
		 *	Prints o to stdout, if DEBUG is true.
		 *	@param o The object to be printed
		 *
		**/
		public static final void print(Object o);

	}

Board Module
============
	/**
	 *	
	 *	Board represents a single game state. It knows the 
	 *	position of each chip, and enforces the rules of the 
	 *	game, throwing an exception whenever a rule violation
	 *	is encountered.
	 *	
	 *	Invariants:
	 *  	1. Will throw an exception if a move is illegal.
	 *  	2. No two chips in any given place.
	 *  	3. Cannot be three chips adjacent to each other.
	 *  	4. Cannot place more than 10 chips of the same color.
	 *  	5. No chips in wrong goals.
	 *  	6. No chips in corners.
	 *	
	**/
	public class Board{
		
		/**
		 *
		 *	Constructs a new Board.
		 *
		**/
		public Board();

		/**
		 *
		 *	Moves chip c to point x,y
		 *	@param c The chip to be moved.
		 *	@param x The x coordinate of the chip's destination
		 *	@param y The y coordinate of the chip's destination
		 *	@throws InvalidChipException if Chip c is not valid.
		 *	@throws IllegalChipMoveException if the chip is moved
		 * 			off the legal section of the board, three in a row, 
		 *			or into the wrong goal.
		 *
		**/
		public void moveChip(Chip c, int x, int y) throws InvalidChipException, IllegalChipMoveException;


		/**
		 *
		 *	Creates chip at x,y.
		 *	@param x the destination x coordinate
		 *	@param y the destination y coorinate
		 *	@throws InvalidChipException if the chip is added
		 *			in an illegal location (on top of another
		 *			chip, in the wrong goal, or three in a row).
		 *
		**/
		public void addChip(int x, int y) throws InvalidChipException;

		/**
		 *
		 *	Gets the chip at x,y.
		 *	@param x the target x coordinate
		 *	@param y the target y coordinate
		 *	@throws ChipNotFoundException if there is no chip at x,y
		 *	@return the Chip at x,y
		 *
		**/
		public Chip getChip(int x, int y) throws ChipNotFoundException;

		/**
		 *
		 *	Tells whether a chip at x,y exists
		 *	@param x the target x coordinate
		 *	@param y the target y coordinate
		 *	@return whether there is a chip at x,y
		 *
		**/
		public boolean hasChip(int x, int y);

		/**
		 *
		 * Returns whether the game is over.
		 * @return the color of the winning player, or Constants.NULL_PLAYER if the game is not over.
		 *
		**/
		public int isGameOver();
	}

	/**
	 *
	 *	The chip ADT represents a single chip on the board.
	 *	Each chip knows its position on the board.
	 *
	**/
	public class Chip{

		/**
		 *
		 *	Constructs a new chip on board b.
		 *	@param b specifies the board that the chip belongs to
		 *	@throws InvalidChipException when 
		 *
		**/
		public Chip(Board b, color c, int x, int y) throws InvalidChipException;

		/**
		 *
		 *	Get the color of the chip
		 *	@return the color of the chip, defined in Constants
		 *
		**/

		public int getColor();

		/**
		 *
		 *	Returns whether this chip is line of sight with Chip c
		 *	@param c is the chip for comparison
		 *	@return whether the chip is line of sight with c
		 *
		**/
		public boolean isLOS(Chip c);

		/**
		 *
		 *	Returns whether this chip is between chips c and d.
		 *	@param c the first chip
		 *	@param c the second chip
		 *	@return whether this chip is between c and d.
		 *
		**/
		public boolean isBetween(Chip c, Chip d);

		/**
		 *
		 *	Returns the number of same-color neighbors this chip has.
		 *	@returns the number of neighbors of this chip's color.
		 *
		**/
		public int getSameColorNeighbors();

	}

	/**
	 *
	 *	An exception thrown when a player attempts to create a chip at an invalid location
	 *
	**/
	public class InvalidChipException extends Exception{

		/**
		 *
		 *	Constructs an InvalidChipException
		 *	@param s the message of the exception
		 *	@param x the x coordinate of the invalid chip
		 *	@param y the y coordinate of the invalid chip
		 *
		**/
		public InvalidChipException(String s, int x, int y);
	}

	/**
	 *
	 *	An exception thrown when a player attemps to get a chip not on the board
	 *
	**/
	public class ChipNotFoundException extends Exception{

		/**
		 *
		 *	Constructs a ChipNotFoundException
		 *	@param s the message of the exception
		 *	@param x the x coordinate of the invalid chip query
		 *	@param y the y coordinate of the invalid chip query
		 *
		**/
		public ChipNotFoundException(String s, int x, int y);
	}

	/**
	 *
	 *	An exception thrown when a player attemps to move a chip to an illegal square.
	 *
	**/
	public class IllegalChipMoveException extends Exception{

		/**
		 *
		 *	Constructs a IllegalChipMoveException
		 *	@param s the message of the exception
		 *	@param x the x coordinate of the invalid chip move
		 *	@param y the y coordinate of the invalid chip move
		 *
		**/
		public IllegalChipMoveException(String s, int x, int y);
	}

AI Module
=========
	/**
	 *
	 *	MachinePlayer represents an instance of our AI.
	 *
	 *	Invariants:
	 *  	1. Does not make illegal moves
	 *  
	**/
	public class MachinePlayer extends Player{

		/**
		 *
		 * Constructs a MachinePlayer with an AI for the game.
		 * @param b The board in which this MachinePlayer belongs to.
		 * @param c The color of which this MachinePlayer is.
		**/
		public MachinePlayer(Board b, Color c);

		/**
		 *
		 * Decides what move is the best possible move.
		 * Uses alpha-beta pruning with an algorithm determining how far 
		 * the AI will search.
		 * @return The best possible move based on the AI.
		**/
		@Override
		public Move chooseMove();

		/**
		 *
		 * Updates the current status of the internal board if the opponent move is legal.
		 * If move is illegal, nothing is done to the internal status of the board.
		 * Enforces invariant that the move was the opponent is not illegal when calculating "this" move.
		 * @return boolean indicating whether opponent Move m is legal or not.
		**/
		@Override
		public boolean opponentMove(Move m);

		/**
		 *
		 * Updates the current status of the internal board if the "this" player move is legal.
		 * If move is illegal, nothing is done to the internal status of the board.
		 * Enforces the invariant that move made is not illegal.
		 * @return boolean indicating whether opponent Move m is legal or not.
		**/
		@Override
		public boolean forceMove(Move m);
	}

Referee
=======
	public class Referee extends Player{
		/**
		 *  
		 *	Referee is a player that enforces the rules, and
		 *	awards wins in the event of the game ending
		 *	or a rules violation.
		 *  
		 *	Invariants:
		 *  	1. Does not change the board
		 *  	2. Does not allow illegal moves
		 *  
		**/

		/**
		 *	Checks to see if board is valid based on invariants.
		 *	@param Board b, the board given by the players.
		 *	@return whether the board follows the invariants or not.
		**/
		public boolean isValidBoard(Board b);

		/**
		 *	Determines who wins the game.
		 *	A player wins the game if he has a network of 8 chips from one end 
		 *	of the goal  to the other end of the the goal. 
		 *	@param Board b, the board given by the players.
		 *	@return the winner of the game. Can return an error.
		**/
		public int getWinner(Board b);

		/**
		 *	Determines if the game is over or not.
		 *	@param Board b, the board given by the players
		 *	@return whether the game is over or not. If not, continue the game.
		**/
		public int isGameOver(Board b);
	}
