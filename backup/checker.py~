import sys

	line_number = 0
	check_patterns = [['a','b','c','A','B','C'], # 1
			'rational',                # 2
			'rational',                # 3
			['a','b','c','d','e','A','B','C','D','E'], # 4
			['a','b','c','A','B','C'], # 5
			['a','b','c','A','B','C'], # 6
			['a','b','c','A','B','C'], # 7
			['a','b','c','A','B','C'], # 8
			['a','b','A','B'], # 9
			['a','b','A','B'], # 10
			['a','b','c','d','e','A','B','C','D','E'], # 11
			['a','b','c','d','A','B','C','D'], # 12
			'pair_of_numbers', #13
			['letter_number_pair', [['a','b','c','A','B','C'], 'number'],'.'], #14
			['a','b','c','d','A','B','C','D'], # 15
			['a','b','c','A','B','C'], # 16
			'integer', # 17
			['a','b','c','A','B','C'], # 18
			['a','b','A','B'], # 19
			'anything', # 20
			]

	def check_integer(int_string):
		try:
			a = int(int_string)
			return True
		except:
			return False


	def check_rational(rat_string):
		if (check_integer(rat_string)):
			return True
		(first,sep,second) = rat_string.partition("/")
		first_passed = False
		second_passed = False

		if check_integer(first):
			first_passed = True
		if check_integer(second):
			second_passed = True

		return (first_passed and second_passed)


	def check_pair_of_numbers(rat_string, sep=','):
		(first,sep,second) = rat_string.partition(sep)
		first_passed = False
		second_passed = False

		if  check_number(first):
			first_passed = True
		if check_number(second):
			second_passed = True

		return (first_passed and second_passed)

	def check_number(content):
		if check_integer(content) or check_rational(content):
			return True
		else:
			try:
				a = float(content)
				return True
			except ValueError:
				return False

	result = {}

	for line in sys.stdin:
		line_number +=1
		(number, sep, content) = line.partition(".")
		if (not sep) or (sep == ""):
			print "Error: no problem number on line ", line
		else:
			try:
				pnum = int(number)
				passed = False

				#print "Number is  -", pnum

				if (pnum > 20 or pnum < 1):
					print "Error: xx could not understand problem number on line ", line
				else:
					check_info = check_patterns[pnum-1]
					if check_info.__class__ == "".__class__:
						if (check_info == "integer"):
							passed = check_integer(content)
							if (not passed):
								print "Error: bad line ", line, " should be integer "
						elif (check_info == "rational"):
							passed = check_rational(content)
							if (not passed):
								print "Error: bad line ", line, " should be rational a/b "
						elif (check_info == "pair_of_numbers"):
							passed = check_pair_of_numbers(content)
							if (not passed):
								print "Error: bad line ", line, " should be pair of numbers "
						elif (check_info == "anything"):
							passed = True
						else:
							print "Bug in check program. private message or check piazza."
					elif check_info.__class__ == [].__class__:
						if (check_info[0]  == 'letter_number_pair'):
							# ['pair', [['a','b','c','A','B','C'], 'pair_of_numbers',',']], #15
							# pass
							answers = check_info[1][0]
							(letter,sep,number) = content.partition(".")
							cleaned = letter.rstrip().lstrip()
							if cleaned in check_info[1][0]:
								passed = True
							else:
								passed = False
								print "Error ", pnum, " does not have one of ", check_info, " as answer "
							if (sep != ""):
								#print "checking number ", number
								if (not check_number(number)):
									passed = False
						else:
							cleaned = content.rstrip().lstrip()
							if cleaned in check_info:
								passed = True
							else:
								print "Error ", pnum, " does not have one of ", check_info, " as answer "

				if passed:
					if pnum in result:
						print "Error: more than one line for problem", pnum
					else:
						result[pnum] = passed
						print "line number ", line_number, " for problem ", pnum, "passes."
				else:
					print "Error:  with li  \n", "line number ", line_number, ":", line
			except ValueError:
				print "Error: Bad problem number in line \n", "line number", line_number, ": ", line

