Amortized Analysis
==================
  Average the better than worst case

The Averaging Method
====================
  Any operation that doesn't resize table takes O(1) time.
  n: items in hash table; N buckets.

  One second to insert new item, n++, and check if n=N.
  If so, double size from N to 2N, taking 2N seconds.
  Ensures that load factor n/N < 1.

  Suppose new table has n=0, N=1.

  After i inserts, n<=i

  N must bepower fo 2, can't be <=n

  N is smallest power of 2 > n, which is <= 2n.
  Total seconds for all resizing ops is 2+4+8+...N/4+N/2+N=2N-2

  Cost of i inserts is i+2N-2 seconds.
  <=5i-2 seconds

  Average (Amortized) time of insert <= (5i-2)/i = 5-2/i seconds \in O(1)
  
  Amortized running time of inset \in O(1)
  Worst case running time of inset \in O(1)

The Accounting Method
=====================
  Dollar: Unit of time: long enough to do a single constant time operation

  Each operation has 
    -an amortized cost: Number of dollars we charge to do operation--A fixed function of n
    -an actual cost: Amount of time we actually take to do the operation--varies wildly from operation to operation

  When amortzed cost > actual cost, extra ## saved in bank to be spent on later operations.

  When actual > amortized, withdraw $$ to pay.

  The bank balance must NEVER fall below zero.
  
  Apply to HashTable
  ------------------
    Every op costs $1 of time + time for resizing, if any.
      -Insert doubles table size i n=N AFTER new item inserted, n++
      -Removes halves the table if n=N/4 after item removed, n--, taking $N to resize to N/2 buckets. Load factor always > 1/4

    Either way, a hash table was just resized and has n=N/2

    Amortized costs:
      insert: $5
      remove: $5
      find: $1
    
    At any time, we know $$ inbank from n & N.

    Every insert/remove costs one actual dollar, puts $4 in bank.

    There must be $4(n-N/2) saved. ---Function of data structure, does not depend on history.

    insert() resizes table if n reaches N.-->But there's always $2N saved in the bank.
    Resize the hashTable to 2N buckets
    Costs $2N, but we already have $2N in the bank. This uses all the money in the bank, but it's going to be a while until the next resize.

    remove() resizes if n drops to N/4-->There are >=$N in the bank.

    Resizing from N to N/2 bucets costs $N.
    
    Bank balance never drops below zero
      --> amortized costs are valid, are \in O(1)
