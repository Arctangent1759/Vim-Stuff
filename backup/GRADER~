(a)  How would your algorithm ensure that there is a path between every pair of
     cells, but no more than one path between any pair of cells (i.e., no
     cycles)?

     Generate a connected (or complete) graph of n points.
     Perform a depth-first search on the graph. The visit function connects 
     the node that it traverses with the one that it came from. Since the 
     depth first search always traverses all nodes in any connected graph, 
     it gauruntees that the there will be a path to every cell. Since the 
     depth first search does not visit nodes already marked visited, there 
     will be no cycles, as no node is visited twice.

(b)  How does your algorithm use random numbers to generate a different maze
     each time?  Specifically, what decision should be made by random numbers
     at each recursive invocation of the depth-first search method?

     A random number generator will decide ordering in which which neighbor 
     node from the set of all nodes connected to the current node are traversed.
     Since the order in which the children of a given node are visited determines the 
     shape of the maze, this will ensure that a different maze will be produced almost
     every time
