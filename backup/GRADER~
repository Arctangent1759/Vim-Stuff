GRADER file for Homework 8

 Your Name:  
Your Login:  

Part III.  Running time comparisons

  List size         mergesort             quicksort
       10           0                     0
      100           1                     1
    1,000           13                    6
   10,000           41                    31
  100,000           153                   186





Part IV.

  Is mergesort stable?  
      Yes.
  Why or why not?
      My Mergesort is deterministic; there is no random element in the algorithm that will produce aberrant behavior in the case of ordering elements with the same key.
	  The method mergeSortedQueues() determines whether or not the sort is stable. 
	  Particularly, the order in which the method inserts elements when both q1's element returns 0 on compareTo q2's element determines the stability..
	  If the second list is dequeued first, then the sort is stable.
	  If the first list is dequeued first, then the sort is not stable, since the elements are out of order.
	  

  Is quicksort stable?  
      Yes.
  Why or why not?
      Unstable quicksorts are in-place quicksorts. My quicksort creates a new queue, and therefore, can preserve the ordering of equal elements.
